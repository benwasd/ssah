/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.17.3.0 (NJsonSchema v9.10.46.0 (Newtonsoft.Json v10.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { ApiProxyBase } from "./api-proxy-base";

export class RegistrationApiProxy extends ApiProxyBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
    }

    getRegistration(registrationId: string): Promise<RegistrationDto> {
        let url_ = this.baseUrl + "/api/Registration/GetRegistration?";
        if (registrationId === undefined || registrationId === null)
            throw new Error("The parameter 'registrationId' must be defined and cannot be null.");
        else
            url_ += "registrationId=" + encodeURIComponent("" + registrationId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetRegistration(_response));
        });
    }

    protected processGetRegistration(response: Response): Promise<RegistrationDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <RegistrationDto>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RegistrationDto>(<any>null);
    }

    getRegistrations(applicantId: string): Promise<RegistrationDto[]> {
        let url_ = this.baseUrl + "/api/Registration/GetRegistrations?";
        if (applicantId === undefined || applicantId === null)
            throw new Error("The parameter 'applicantId' must be defined and cannot be null.");
        else
            url_ += "applicantId=" + encodeURIComponent("" + applicantId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetRegistrations(_response));
        });
    }

    protected processGetRegistrations(response: Response): Promise<RegistrationDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <RegistrationDto[]>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RegistrationDto[]>(<any>null);
    }

    register(registrationDto: RegistrationDto): Promise<RegistrationResultDto> {
        let url_ = this.baseUrl + "/api/Registration/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(registrationDto);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processRegister(_response));
        });
    }

    protected processRegister(response: Response): Promise<RegistrationResultDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <RegistrationResultDto>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RegistrationResultDto>(<any>null);
    }

    update(registrationDto: RegistrationDto): Promise<RegistrationResultDto> {
        let url_ = this.baseUrl + "/api/Registration/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(registrationDto);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processUpdate(_response));
        });
    }

    protected processUpdate(response: Response): Promise<RegistrationResultDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <RegistrationResultDto>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RegistrationResultDto>(<any>null);
    }

    possibleCourseDatesPerPartipiant(registrationId: string): Promise<PossibleCourseDto[]> {
        let url_ = this.baseUrl + "/api/Registration/PossibleCourseDatesPerPartipiant?";
        if (registrationId === undefined || registrationId === null)
            throw new Error("The parameter 'registrationId' must be defined and cannot be null.");
        else
            url_ += "registrationId=" + encodeURIComponent("" + registrationId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processPossibleCourseDatesPerPartipiant(_response));
        });
    }

    protected processPossibleCourseDatesPerPartipiant(response: Response): Promise<PossibleCourseDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <PossibleCourseDto[]>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PossibleCourseDto[]>(<any>null);
    }

    commitRegistration(commitRegistrationDto: CommitRegistrationDto): Promise<void> {
        let url_ = this.baseUrl + "/api/Registration/CommitRegistration";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(commitRegistrationDto);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processCommitRegistration(_response));
        });
    }

    protected processCommitRegistration(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export interface RegistrationDto {
    registrationId?: string | undefined;
    applicantId?: string | undefined;
    surname: string;
    givenname: string;
    residence: string;
    phoneNumber: string;
    preferSimultaneousCourseExecutionForPartipiants: boolean;
    availableFrom: Date;
    availableTo: Date;
    status: RegistrationStatus;
    participants: RegistrationParticipantDto[];
}

export enum RegistrationStatus {
    Registration = 0, 
    CourseSelection = 1, 
    Commitment = 2, 
}

export interface EntityDto {
    id: string;
    rowVersion: string;
}

export interface RegistrationParticipantDto extends EntityDto {
    name: string;
    courseType: CourseType;
    discipline: Discipline;
    niveauId: number;
    language?: Language | undefined;
    ageGroup?: number | undefined;
}

export enum CourseType {
    Group = 0, 
}

export enum Discipline {
    Ski = 0, 
    Snowboard = 1, 
}

export enum Language {
    SwissGerman = 0, 
    German = 1, 
    French = 2, 
    Italian = 3, 
    English = 4, 
    Russian = 5, 
}

export interface RegistrationResultDto {
    applicantId: string;
    registrationId: string;
}

export interface PossibleCourseDto {
    registrationPartipiantId: string;
    identifier: number;
    startDate: Date;
    coursePeriods: Period[];
}

export interface Period {
    start: Date;
    duration: string;
    end: Date;
}

export interface CommitRegistrationDto {
    registrationId: string;
    payment: string;
    participants: CommitRegistrationParticipantDto[];
}

export interface CommitRegistrationParticipantDto extends EntityDto {
    language: Language;
    ageGroup: number;
    courseIdentifier: number;
    courseStartDate: Date;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if(result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}